version: '3.7'
services:

  db:
    image: mysql:5.7
    restart: always
    ports: 
      - "3307:3306"
    # local to the project directory only for demo purposes
    volumes:
      - ./.db:/var/lib/mysql:rw,delegated
    env_file:
      - .env

  nginx:
    image: nginx:latest
    restart: always
    ports:
      - "80:80"
    volumes:
      - ./reverse_proxy/nginx.conf:/etc/nginx/nginx.conf
    depends_on: 
      - rails_service
      - go_service
    environment:
      WAIT_HOSTS: go_service:8000, rails_service:3000

  rails_service:
    build:
      context: ./rails_service
    command:  bash -c "rm -f /app/tmp/pids/server.pid && rake db:create && rake db:migrate && bundle exec whenever --update-crontab && /wait && bundle exec rails s -p 3000 -b '0.0.0.0' & cron -f"
    env_file:
      - .env
    environment:
      WAIT_HOSTS: db:3306, rabbitmq:5672, redis:6379, elasticsearch:9200
    volumes: 
      - ./rails_service:/app
    ports: 
      - "3000:3000"
    depends_on:
      - db
      - redis
      - rabbitmq
      - elasticsearch
    links:
      - db


  redis:
    restart: always
    image: redis:alpine
    ports:
      - "6379:6379"

  rabbitmq:
    image: rabbitmq:alpine
    ports:
      - "5672:5672"
      - "15672:15672"

  go_service:
    build:
      context: ./go_service
    restart: always
    volumes: 
      - ./go_service:/app
    depends_on: 
      - redis
      - rabbitmq
    ports: 
      - "8000:8000"
    env_file:
      - .env
    environment:
      WAIT_HOSTS: rabbitmq:5672, redis:6379      

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:6.4.2
    hostname: 'elasticsearch'
    ports:
      - "9200:9200"

  sneakers:
    depends_on:
        - elasticsearch
        - db
        - redis
        - rabbitmq
        - rails_service
    restart: always
    build:
      context: ./rails_service
    env_file:
      - .env
    environment:
      WAIT_HOSTS: rails_service:3000
    volumes: 
      - ./rails_service:/app
    command: bash -c "/wait && bundle exec rails runner \"require 'sneakers/spawner';Sneakers::Spawner.spawn\""
    logging:
      driver: "json-file"
      options:
        max-size: "1g"
        max-file: "3"
